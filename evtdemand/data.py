# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01-data-processing.ipynb (unless otherwise specified).

__all__ = ['clean_real_power_df', 'load_real_power_dataset', 'load_weather_df']

# Cell
import numpy as np
import pandas as pd

import os

# Cell
def clean_real_power_df(
    df: pd.DataFrame,
    cols_to_keep: list=['maxvalue', 'minvalue', 'value_max', 'value_min', 'quality', 'samplecount', 'value']
):
    if 'attrId' in df.columns:
        assert df['attrId'].reset_index().duplicated().sum() == 0, 'The time and attrId data must contain no duplicate rows'
        assert df['attrId'].value_counts().size == 1, 'Only one `attrId` value should be contained in the dataset'

    if 'units' in df.columns:
        assert df['units'].value_counts().size == 1, 'Only one `units` value should be contained in the dataset'

    df_clean = df[sorted(list(set(cols_to_keep).intersection(set(df.columns))))].copy()

    return df_clean

def load_real_power_dataset(
    data_dir: str,
    site: str='Geevor_CB52',
    real_power_variable: str='minute',
    time_period: str=''
):
    valid_time_periods = ['', '_august', '_pre_august', '_september']
    valid_real_power_variables = ['minute', 'observation_variable_half_hourly', 'target_variable_half_hourly_max_min']
    assert real_power_variable in valid_real_power_variables, f'`real_power_variable` must be one of {", ".join(valid_real_power_variables)}'
    assert time_period in valid_time_periods, f'`time_period` must be one of {", ".join(valid_time_periods)}'

    fp = f'{data_dir}/MW_{site}_MW_{real_power_variable}_real_power_MW{time_period}.csv'

    df = pd.read_csv(fp)

    if 'Unnamed: 0' in df.columns:
        df = df.drop(columns=['Unnamed: 0'])

    df['time'] = pd.to_datetime(df['time'], utc=True)
    df = df.set_index('time')

    df = clean_real_power_df(df)

    return df

# Cell
def load_weather_df(
    data_dir: str,
    grid_point: str='mousehole_1'
):
    df = pd.read_csv(f'{data_dir}/df_{grid_point}_hourly.csv')

    df['datetime'] = pd.to_datetime(df['datetime'], utc=True)
    df = df.set_index('datetime')

    return df